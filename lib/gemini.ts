import { TransformType } from '@/types'
import { getPromptForTransform } from './prompts'

const GEMINI_API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent'

interface GeminiImagePart {
  inlineData: {
    mimeType: string
    data: string
  }
}

export async function generateImage(
  transformType: TransformType,
  images: string[],
  apiKey: string
): Promise<string> {
  const prompt = getPromptForTransform(transformType)

  const imageParts: GeminiImagePart[] = images.map((base64) => ({
    inlineData: {
      mimeType: 'image/jpeg',
      data: base64,
    },
  }))

  const requestBody = {
    contents: [
      {
        role: 'user',
        parts: [{ text: prompt }, ...imageParts],
      },
    ],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 8192,
    },
  }

  const response = await fetch(`${GEMINI_API_ENDPOINT}?key=${apiKey}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestBody),
  })

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}))
    throw new Error(
      errorData.error?.message || `Gemini API Error: ${response.status}`
    )
  }

  const data = await response.json()

  if (!data.candidates?.[0]?.content?.parts) {
    throw new Error('No valid response from Gemini API')
  }

  const parts = data.candidates[0].content.parts
  const imagePart = parts.find((p: any) => p.inlineData?.data)

  if (!imagePart) {
    throw new Error('No image generated by Gemini API')
  }

  return imagePart.inlineData.data
}